/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package accountinfo;

import static accountinfo.dash_board.mode;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class showAccountdetails extends javax.swing.JFrame {
    int clickCount = 0;
    long seconds;
    Thread thread = null;
 private DefaultTableModel model1;
  private List<AccountData> accountData;
  private List<DealData> dealData;
  public static Mode mode;
   private DataInputStream inputStream;
    private DataOutputStream outputStream;
    /**
     * Creates new form showAccountdetails
     */
    public showAccountdetails() {
        
        initComponents();
          try {

           mode=Mode.Hello;    
              model1 = (DefaultTableModel)jTable2.getModel();
           accountData = new ArrayList();
          
          readAccountData();
          setTableListener();
          createAccountList();
           
        } catch (IOException e) {
        }

       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        back = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Address", "PAN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(back)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
  new dash_board().setVisible(true);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(showAccountdetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(showAccountdetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(showAccountdetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(showAccountdetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new showAccountdetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
private void readAccountData() throws IOException {
        File file = new File("account data.mno");

        if (!file.exists()) {
            return;
        }
        inputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
        while (inputStream.available() > 0) {

            int dataLength = inputStream.readInt();
            byte[] dataBytes = new byte[dataLength];
            inputStream.read(dataBytes, 0, dataLength);
            String data[] = new CipherData().decrypter(dataBytes).split(":");
            AccountData accountData = new AccountData();
            accountData.setName(data[0]);
            accountData.setAddress(data[1]);
            accountData.setPan(data[2]);
            accountData.setIsSelf(Boolean.parseBoolean(data[3]));
            accountData.setId(Integer.valueOf(data[4]));
            this.accountData.add(accountData);
        }
//        System.out.println(this.accountData);
        inputStream.close();

    }
private void createAccountList() {

      
        accountData.forEach((data) -> {
           
                int isself;
                int Id;
                String name;
                String address;
                String pan;
                
               Id = data.getId();
               name=data.getName();
               address=data.getAddress();
               pan=data.getPan();
                if(!data.isIsSelf()){
                Object obj[] = {name,address,pan};
                model1.addRow(obj);}
        });

    }
 private void setTableListener() {
           
      
        jTable2.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                return;
            }

            int row =jTable2.getSelectedRow();
            if (row < 0) {
                return;
            }
            //get the data for the selected row
            for (AccountData data : accountData)
            {
                
                if (data.getName().equals((String) jTable2.getValueAt(row, 0))) {
                    
             Object[] options = {"View"};
                    int n = JOptionPane.showOptionDialog(null, null, "Choose an Option!!", JOptionPane.DEFAULT_OPTION,
                            JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
                    jTable2.removeRowSelectionInterval(row, row);
                    if (n < 0) {
                        return;
                    }
                    switch (n) {
                        case 0: {
                            try {
                                dispose();
                                new ShowAccountData(data,accountData,dealData).setVisible(true);
                            } catch (IOException ex) {
                                Logger.getLogger(dash_board.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            break; 
                 
                        
                }
                }
                }
            }
        });
    }
 
}
