package accountinfo;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/*
 *
 * @author RIDDLE
 *
 */

public class ShowDateData extends javax.swing.JFrame {

    private final List<AccountData> accountData;
    private final List<DealData> dealData;
    DefaultTableModel tableModel;
    ButtonModel buttonModel;
    String prevFrom = "";
    String prevTo = "";

    public ShowDateData(List<DealData> dealData, List<AccountData> accountData) {
        initComponents();
        tableModel = (DefaultTableModel) dataTable.getModel();
        this.dealData = dealData;
        this.accountData = accountData;
        fromDate.setDate(new Date());
        toDate.setDate(new Date());

        if (dealData != null && accountData != null) {
            showAllData();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        activeCheckBox = new javax.swing.JCheckBox();
        paidCheckBox = new javax.swing.JCheckBox();
        byDate = new javax.swing.JRadioButton();
        byFromDate = new javax.swing.JRadioButton();
        byToDate = new javax.swing.JRadioButton();
        holdCheckBox = new javax.swing.JCheckBox();
        inactiveCheckBox = new javax.swing.JCheckBox();
        fromDate = new com.toedter.calendar.JDateChooser();
        toDate = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        generateExcelButton = new javax.swing.JButton();
        generatePdfButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(978, 450));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText(" TO");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(433, 11, 30, 30));

        activeCheckBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        activeCheckBox.setSelected(true);
        activeCheckBox.setText("Active");
        activeCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                activeCheckBoxItemStateChanged(evt);
            }
        });
        jPanel1.add(activeCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 10, -1, -1));

        paidCheckBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        paidCheckBox.setText("Paid");
        paidCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paidCheckBoxItemStateChanged(evt);
            }
        });
        jPanel1.add(paidCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 40, 63, -1));

        byDate.setSelected(true);
        byDate.setText("by Date");
        byDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                byDateMouseClicked(evt);
            }
        });
        jPanel1.add(byDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        byFromDate.setText("by From Date");
        byFromDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                byFromDateMouseClicked(evt);
            }
        });
        jPanel1.add(byFromDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        byToDate.setText("by Due Date");
        byToDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                byToDateMouseClicked(evt);
            }
        });
        byToDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byToDateActionPerformed(evt);
            }
        });
        jPanel1.add(byToDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        holdCheckBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        holdCheckBox.setText("Hold");
        holdCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                holdCheckBoxItemStateChanged(evt);
            }
        });
        jPanel1.add(holdCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, -1, -1));

        inactiveCheckBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        inactiveCheckBox.setText("Inactive");
        inactiveCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                inactiveCheckBoxItemStateChanged(evt);
            }
        });
        jPanel1.add(inactiveCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 40, -1, -1));

        fromDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fromDatePropertyChange(evt);
            }
        });
        jPanel1.add(fromDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 10, 240, 30));

        toDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                toDatePropertyChange(evt);
            }
        });
        jPanel1.add(toDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, 270, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 978, 73));

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "From", "To", "Brokerage Account", "Amount", "Rate", "Interest", "TDS", "Net", "Giver", "Reciver"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(dataTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 75, 980, 331));

        generateExcelButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        generateExcelButton.setText("Generate Excel");
        generateExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateExcelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(generateExcelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(262, 420, -1, -1));

        generatePdfButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        generatePdfButton.setText("Generate PDF");
        generatePdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePdfButtonActionPerformed(evt);
            }
        });
        getContentPane().add(generatePdfButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(478, 420, -1, -1));

        backButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backButton.setText("BACK");
        backButton.setPreferredSize(new java.awt.Dimension(73, 23));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 80, -1));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 220, 20));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fromDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fromDatePropertyChange
        boolean active = activeCheckBox.isSelected();
        boolean paid = paidCheckBox.isSelected();
        boolean inactive = inactiveCheckBox.isSelected();
        boolean hold = holdCheckBox.isSelected();

        updateTable(active, paid, hold, inactive, fromDate.getDate(), toDate.getDate());
    }//GEN-LAST:event_fromDatePropertyChange

    private void toDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_toDatePropertyChange
        boolean active = activeCheckBox.isSelected();
        boolean paid = paidCheckBox.isSelected();
        boolean inactive = inactiveCheckBox.isSelected();
        boolean hold = holdCheckBox.isSelected();

        updateTable(active, paid, hold, inactive, fromDate.getDate(), toDate.getDate());
    }//GEN-LAST:event_toDatePropertyChange

    private void generatePdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePdfButtonActionPerformed

        if (fromDate.getDate() == null) {
            return;
        }

        if (tableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Data Found!!", null, JOptionPane.INFORMATION_MESSAGE);
        }

        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(new File("Account Detail.pdf")));
            document.open();
            String header = "Deals from " + new SimpleDateFormat("dd/MM/yyyy").format(fromDate.getDate());
            if (toDate.getDate() != null) {
                header = header + " to " + new SimpleDateFormat("dd/MM/yyyy").format(toDate.getDate());
            }
            header += "\n";
            document.add(new Paragraph(header));
            document.add(new Paragraph(" "));
            PdfPTable table = new PdfPTable(tableModel.getColumnCount());
            PdfPCell cell = new PdfPCell();
            for (int i = 0; i < tableModel.getColumnCount(); i++) {
                if (i == 3) {
                    String value[] = ((String) tableModel.getColumnName(i)).split(" ");
                    String result = value[0] + "\n" + value[1];
                    cell = new PdfPCell(new Paragraph(result));
                } else {
                    String value = (String) tableModel.getColumnName(i);
                    cell = new PdfPCell(new Paragraph(value));
                }
                table.addCell(cell);
            }
            table.setWidthPercentage(100);
            document.add(table);
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                table = new PdfPTable(tableModel.getColumnCount());
                table.setWidthPercentage(100);
                for (int j = 0; j < tableModel.getColumnCount(); j++) {
                    String value = (String) tableModel.getValueAt(i, j);
                    cell = new PdfPCell(new Paragraph(value));
                    table.addCell(cell);
                }
                document.add(table);
            }

            document.close();
            writer.close();
            Desktop.getDesktop().open(new File("Account Detail.pdf"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ShowDateData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException | IOException ex) {
            Logger.getLogger(ShowDateData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generatePdfButtonActionPerformed

    private void generateExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateExcelButtonActionPerformed
        if (fromDate.getDate() == null) {
            return;
        }

        if (tableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Data Found!!", null, JOptionPane.INFORMATION_MESSAGE);
        }
        Workbook workbook = new HSSFWorkbook();
        try {
            OutputStream stream = new FileOutputStream("Deal Data.xls");
            Sheet sheet = workbook.createSheet("Deal");
            int rowCount = 2;
            Row headerRow = sheet.createRow(0);
            String header = "Deal Information from " + new SimpleDateFormat("dd/MM/yyyy").format(fromDate.getDate());
            if (toDate.getDate() != null) {
                header = header + " to " + new SimpleDateFormat("dd/MM/yyyy").format(toDate.getDate());
            }
            headerRow.createCell(2).setCellValue(header);
            headerRow = sheet.createRow(rowCount);
            for (int i = 0; i < tableModel.getColumnCount(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(tableModel.getColumnName(i));
            }
            rowCount++;
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                Row row = sheet.createRow(rowCount);
                rowCount++;
                for (int j = 0; j < tableModel.getColumnCount(); j++) {
                    row.createCell(j).setCellValue((String) tableModel.getValueAt(i, j));
                }
            }

            for (int i = 0; i < tableModel.getColumnCount(); i++) {
                sheet.autoSizeColumn(i);
            }

            workbook.write(stream);
            stream.close();

            Desktop.getDesktop().open(new File("Deal Data.xls"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ShowAccountData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ShowAccountData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generateExcelButtonActionPerformed

    //jump back to the previous window
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new dash_board().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    //if active check box clicked
    private void activeCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_activeCheckBoxItemStateChanged
 
        boolean active = activeCheckBox.isSelected();
        boolean paid = paidCheckBox.isSelected();
        boolean inactive = inactiveCheckBox.isSelected();
        boolean hold = holdCheckBox.isSelected();
        updateTable(active, paid, hold, inactive, fromDate.getDate(), toDate.getDate());


    }//GEN-LAST:event_activeCheckBoxItemStateChanged

    //if paid check box clicked
    private void paidCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_paidCheckBoxItemStateChanged
        boolean active = activeCheckBox.isSelected();

        boolean paid = paidCheckBox.isSelected();
        boolean inactive = inactiveCheckBox.isSelected();
        boolean hold = holdCheckBox.isSelected();
        updateTable(active, paid, hold, inactive, fromDate.getDate(), toDate.getDate());
    }//GEN-LAST:event_paidCheckBoxItemStateChanged

    private void holdCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_holdCheckBoxItemStateChanged
        boolean active = activeCheckBox.isSelected();
        boolean paid = paidCheckBox.isSelected();

        boolean inactive = inactiveCheckBox.isSelected();
        boolean hold = holdCheckBox.isSelected();
        updateTable(active, paid, hold, inactive, fromDate.getDate(), toDate.getDate());
    }//GEN-LAST:event_holdCheckBoxItemStateChanged

    private void inactiveCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_inactiveCheckBoxItemStateChanged
        boolean active = activeCheckBox.isSelected();
        boolean paid = paidCheckBox.isSelected();
        boolean inactive = inactiveCheckBox.isSelected();
        boolean hold = holdCheckBox.isSelected();
        updateTable(active, paid, hold, inactive, fromDate.getDate(), toDate.getDate());
    }//GEN-LAST:event_inactiveCheckBoxItemStateChanged

    private void byDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_byDateMouseClicked

        if (byDate.isSelected()) {
            byFromDate.setSelected(false);
            byToDate.setSelected(false);
            updateTable(activeCheckBox.isSelected(), paidCheckBox.isSelected(), inactiveCheckBox.isSelected(), holdCheckBox.isSelected(), fromDate.getDate(), toDate.getDate());
            return;
        }

        byDate.setSelected(true);

    }//GEN-LAST:event_byDateMouseClicked

    private void byFromDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_byFromDateMouseClicked

        if (byFromDate.isSelected()) {
            byDate.setSelected(false);
            byToDate.setSelected(false);
            updateTable(activeCheckBox.isSelected(), paidCheckBox.isSelected(), inactiveCheckBox.isSelected(), holdCheckBox.isSelected(), fromDate.getDate(), toDate.getDate());
            return;
        }
        byFromDate.setSelected(true);

    }//GEN-LAST:event_byFromDateMouseClicked

    private void byToDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_byToDateMouseClicked

        if (byToDate.isSelected()) {
            byFromDate.setSelected(false);
            byDate.setSelected(false);
            updateTable(activeCheckBox.isSelected(), paidCheckBox.isSelected(), inactiveCheckBox.isSelected(), holdCheckBox.isSelected(), fromDate.getDate(), toDate.getDate());
            return;
        }

        byToDate.setSelected(true);
    }//GEN-LAST:event_byToDateMouseClicked

    private void byToDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byToDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_byToDateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowDateData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowDateData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowDateData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowDateData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activeCheckBox;
    private javax.swing.JButton backButton;
    private javax.swing.JRadioButton byDate;
    private javax.swing.JRadioButton byFromDate;
    private javax.swing.JRadioButton byToDate;
    private javax.swing.JTable dataTable;
    private com.toedter.calendar.JDateChooser fromDate;
    private javax.swing.JButton generateExcelButton;
    private javax.swing.JButton generatePdfButton;
    private javax.swing.JCheckBox holdCheckBox;
    private javax.swing.JCheckBox inactiveCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox paidCheckBox;
    private com.toedter.calendar.JDateChooser toDate;
    // End of variables declaration//GEN-END:variables

    //show all data when form is load
    private void showAllData() {
        tableModel.setRowCount(0);
        for (DealData data : dealData) {
            if (data.getStatus().equals(Status.ACTIVE)) {
                Object obj[] = {data.getFromDate(), data.getToDate(), data.getBrokerName(),
                    data.getAmount(), data.getRate(), data.getInterest(), data.getTds(), data.getNet(), data.getFromName(), data.getToName()};

                tableModel.addRow(obj);
            }
        }
    }

    ///update the table according to filter used
    private void updateTable(boolean active, boolean paid, boolean hold, boolean inactive, Date fromDate, Date toDate) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");

        if (fromDate != null && toDate != null) {
            fromDate = new Date(dateFormat.format(fromDate));
            toDate = new Date(dateFormat.format(toDate));
        }
        if (tableModel == null) {
            return;
        }

        if (fromDate == null && toDate != null) {
            JOptionPane.showMessageDialog(this, "Invalid Request", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        tableModel.setRowCount(0);

        boolean result = false;
        //if sorted by date
        if (byDate.isSelected()) {
            for (DealData dealData : this.dealData) {

                if ((active && dealData.getStatus().equals(Status.ACTIVE)) || (paid && dealData.getStatus().equals(Status.PAID))
                        || (hold && dealData.getStatus().equals(Status.HOLD)) || (inactive && dealData.getStatus().equals(Status.INACTIVE))) {

                    if (toDate == null) {
                        if (fromDate == null || fromDate.equals(new Date(dealData.getDate()))) {
                            insertData(dealData);
                        }

                    } else {
                        if (fromDate.compareTo(new Date(dealData.getDate())) <= 0 && toDate.compareTo(new Date(dealData.getDate())) >= 0) {

                            insertData(dealData);
                        }
                    }
                }
            }

        }

        //if sorted by from date
        if (byFromDate.isSelected()) {

            for (DealData dealData : this.dealData) {
                if ((active && dealData.getStatus().equals(Status.ACTIVE)) || (paid && dealData.getStatus().equals(Status.PAID))
                        || (hold && dealData.getStatus().equals(Status.HOLD)) || (inactive && dealData.getStatus().equals(Status.INACTIVE))) {

                    if (toDate == null) {
                        if (fromDate == null || fromDate.equals(new Date(dealData.getFromDate()))) {
                            insertData(dealData);
                        }

                    } else {
                        if (fromDate.compareTo(new Date(dealData.getFromDate())) <= 0 && toDate.compareTo(new Date(dealData.getFromDate())) >= 0) {
                            insertData(dealData);
                        }
                    }
                }
            }
        }

        //if sorted by to date
        if (byToDate.isSelected()) {

            for (DealData dealData : this.dealData) {

                if ((active && dealData.getStatus().equals(Status.ACTIVE)) || (paid && dealData.getStatus().equals(Status.PAID))
                        || (hold && dealData.getStatus().equals(Status.HOLD)) || (inactive && dealData.getStatus().equals(Status.INACTIVE))) {

                    if (toDate == null) {
                        if (fromDate == null || fromDate.equals(new Date(dealData.getToDate()))) {
                            insertData(dealData);
                        }

                    } else {
                        if (fromDate.compareTo(new Date(dealData.getToDate())) <= 0 && toDate.compareTo(new Date(dealData.getToDate())) >= 0) {
                            insertData(dealData);
                        }
                    }
                }
            }

        }
    }

    private void insertData(DealData dealData) {
        Object obj[] = {dealData.getFromDate(), dealData.getToDate(), dealData.getBrokerName(), dealData.getAmount(),
            dealData.getRate(), dealData.getInterest(), dealData.getTds(), dealData.getNet(), dealData.getFromName(), dealData.getToName()};
        tableModel.addRow(obj);
    }
}
