package accountinfo;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/*
 *
 * @author RIDDLE
 * 
 */
public class ShowAccountData extends javax.swing.JFrame {

    private DefaultTableModel defaultTableModel;
    private final List<AccountData> accountData;
    private final List<DealData> dealData;

    public ShowAccountData(List<AccountData> accountData, List<DealData> dealData) {
        initComponents();

        defaultTableModel = (DefaultTableModel) dataTable.getModel();
        this.accountData = accountData;
        this.dealData = dealData;
        createDropDown();
    }
   public ShowAccountData(AccountData data, List<AccountData> accountData, List<DealData> dealData) throws IOException {
        initComponents();
        defaultTableModel = (DefaultTableModel) dataTable.getModel();
        this.dealData = dealData;
        this.accountData = accountData;   
        updateui(data);
 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generateExcelButton = new javax.swing.JButton();
        generatePdfButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        accountsDropDown = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        fromRadioButton = new javax.swing.JRadioButton();
        toRadioButton = new javax.swing.JRadioButton();
        activeCheckBox = new javax.swing.JCheckBox();
        holdCheckBox = new javax.swing.JCheckBox();
        paidCheckBox = new javax.swing.JCheckBox();
        inactiveCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        generateExcelButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        generateExcelButton.setText("Generate Excel");
        generateExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateExcelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(generateExcelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(246, 310, -1, -1));

        generatePdfButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        generatePdfButton.setText("Generate PDF");
        generatePdfButton.setPreferredSize(new java.awt.Dimension(115, 23));
        generatePdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePdfButtonActionPerformed(evt);
            }
        });
        getContentPane().add(generatePdfButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(526, 310, -1, -1));

        backButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backButton.setText("BACK");
        backButton.setPreferredSize(new java.awt.Dimension(73, 23));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        accountsDropDown.setName("0"); // NOI18N
        accountsDropDown.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                accountsDropDownItemStateChanged(evt);
            }
        });
        accountsDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountsDropDownActionPerformed(evt);
            }
        });
        getContentPane().add(accountsDropDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 290, -1));

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Deal Date", "Giver", "Due Date", "Amount", "Rate", "Interest", "TDS", "Brokerage Account"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(dataTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 870, 210));

        fromRadioButton.setText("Giver");
        fromRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fromRadioButtonMouseClicked(evt);
            }
        });
        getContentPane().add(fromRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        toRadioButton.setText("Receiver");
        toRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toRadioButtonMouseClicked(evt);
            }
        });
        getContentPane().add(toRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        activeCheckBox.setSelected(true);
        activeCheckBox.setText("ACTIVE");
        activeCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setFilter(evt);
            }
        });
        getContentPane().add(activeCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 10, -1, -1));

        holdCheckBox.setText("HOLD");
        holdCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setFilter(evt);
            }
        });
        getContentPane().add(holdCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 40, -1, -1));

        paidCheckBox.setText("PAID");
        paidCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setFilter(evt);
            }
        });
        getContentPane().add(paidCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, -1, -1));

        inactiveCheckBox.setText("INACTIVE");
        inactiveCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setFilter(evt);
            }
        });
        getContentPane().add(inactiveCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 40, -1, -1));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 290, 20));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void generatePdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePdfButtonActionPerformed

        if (accountsDropDown.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Select a valid account", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (defaultTableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Data Found!!", null, JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(new File("Account Data.pdf")));
            document.open();
            String header = "Deals for the account: " + accountsDropDown.getSelectedItem();
            document.add(new Paragraph(header));
            document.add(new Paragraph(" "));
            PdfPTable table = new PdfPTable(defaultTableModel.getColumnCount());
            table.setWidthPercentage(100);
            PdfPCell cell = new PdfPCell();
            for (int i = 0; i < defaultTableModel.getColumnCount(); i++) {
                cell = new PdfPCell(new Paragraph(defaultTableModel.getColumnName(i)));
                cell.setHorizontalAlignment(Element.ALIGN_MIDDLE);
                table.addCell(cell);
            }
            document.add(table);

            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                table = new PdfPTable(defaultTableModel.getColumnCount());
                for (int j = 0; j < defaultTableModel.getColumnCount(); j++) {
                    cell = new PdfPCell(new Paragraph((String) defaultTableModel.getValueAt(i, j)));
                    table.addCell(cell);

                }
                table.setWidthPercentage(100);
                document.add(table);

            }
            document.close();
            writer.close();
            Desktop.getDesktop().open(new File("Account Data.pdf"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ShowAccountData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException | IOException ex) {
            Logger.getLogger(ShowAccountData.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_generatePdfButtonActionPerformed

    private void generateExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateExcelButtonActionPerformed
        if (accountsDropDown.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Select a valid account", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (defaultTableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Data Found!!", null, JOptionPane.INFORMATION_MESSAGE);
        }
        Workbook workbook = new HSSFWorkbook();
        try {
            OutputStream stream = new FileOutputStream("Account Data.xls");
            Sheet sheet = workbook.createSheet("Accounts");
            int rowCount = 2;
            Row headerRow = sheet.createRow(0);
            headerRow.createCell(1).setCellValue("Deals for the account: " + accountsDropDown.getSelectedItem());

            headerRow = sheet.createRow(rowCount);
            for (int i = 0; i < defaultTableModel.getColumnCount(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(defaultTableModel.getColumnName(i));
            }
            rowCount++;
            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                Row row = sheet.createRow(rowCount);
                rowCount++;
                for (int j = 0; j < defaultTableModel.getColumnCount(); j++) {
                    row.createCell(j).setCellValue((String) defaultTableModel.getValueAt(i, j));
                }
            }

            for (int i = 0; i < defaultTableModel.getColumnCount(); i++) {
                sheet.autoSizeColumn(i);
            }

            workbook.write(stream);
            stream.close();

            Desktop.getDesktop().open(new File("Account Data.xls"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ShowAccountData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ShowAccountData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generateExcelButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new dash_board().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void fromRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromRadioButtonMouseClicked
        fromRadioButton.setSelected(true);
        toRadioButton.setSelected(false);
        dataTable.getTableHeader().getColumnModel().getColumn(1).setHeaderValue("Reciver");
        dataTable.getTableHeader().repaint();
        updateTable(paidCheckBox.isSelected(), activeCheckBox.isSelected(), holdCheckBox.isSelected(), inactiveCheckBox.isSelected());


    }//GEN-LAST:event_fromRadioButtonMouseClicked

    private void toRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toRadioButtonMouseClicked
        toRadioButton.setSelected(true);
        fromRadioButton.setSelected(false);
        dataTable.getTableHeader().getColumnModel().getColumn(1).setHeaderValue("Giver");
        dataTable.getTableHeader().repaint();
        updateTable(paidCheckBox.isSelected(), activeCheckBox.isSelected(), holdCheckBox.isSelected(), inactiveCheckBox.isSelected());


    }//GEN-LAST:event_toRadioButtonMouseClicked

    private void setFilter(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setFilter
        updateTable(paidCheckBox.isSelected(), activeCheckBox.isSelected(), holdCheckBox.isSelected(), inactiveCheckBox.isSelected());
    }//GEN-LAST:event_setFilter

    private void accountsDropDownItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_accountsDropDownItemStateChanged
        updateTable(paidCheckBox.isSelected(), activeCheckBox.isSelected(), holdCheckBox.isSelected(), inactiveCheckBox.isSelected());
    }//GEN-LAST:event_accountsDropDownItemStateChanged

    private void accountsDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountsDropDownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_accountsDropDownActionPerformed

    /*
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowAccountData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowAccountData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowAccountData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowAccountData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
//                new ShowAccountData().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> accountsDropDown;
    private javax.swing.JCheckBox activeCheckBox;
    private javax.swing.JButton backButton;
    private javax.swing.JTable dataTable;
    private javax.swing.JRadioButton fromRadioButton;
    private javax.swing.JButton generateExcelButton;
    private javax.swing.JButton generatePdfButton;
    private javax.swing.JCheckBox holdCheckBox;
    private javax.swing.JCheckBox inactiveCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox paidCheckBox;
    private javax.swing.JRadioButton toRadioButton;
    // End of variables declaration//GEN-END:variables

    private void createDropDown() {
        accountsDropDown.addItem("Select Account");
        this.accountData.forEach(data -> {
            if (!data.isIsSelf()) {
                accountsDropDown.addItem(data.getName());
            }
        });
    }

    private void updateTable(boolean paid, boolean active, boolean hold, boolean inactive) {
        defaultTableModel.setRowCount(0);
        if (accountsDropDown.getSelectedIndex() == 0) {
            return;
        }

        String account = (String) accountsDropDown.getSelectedItem();
        if (fromRadioButton.isSelected()) {
            dealData.forEach(data -> {

                if ((active && data.getStatus().equals(Status.ACTIVE)) || (paid && data.getStatus().equals(Status.PAID))
                        || (hold && data.getStatus().equals(Status.HOLD)) || (inactive && data.getStatus().equals(Status.INACTIVE))) {
                    if (data.getFromName().equals(account)) {
                        Object obj[] = {data.getDate(),data.getToName(), data.getToDate(), data.getAmount(), data.getRate(),
                            data.getInterest(), data.getTds(), data.getBrokerName()};

                        defaultTableModel.addRow(obj);
                    }
                }

            });
        }

        if (toRadioButton.isSelected()) {
            dealData.forEach(data -> {
                if ((active && data.getStatus().equals(Status.ACTIVE)) || (paid && data.getStatus().equals(Status.PAID))
                        || (hold && data.getStatus().equals(Status.HOLD)) || (inactive && data.getStatus().equals(Status.INACTIVE))) {
                    if (data.getToName().equals(account)) {
                        Object obj[] = {data.getDate(), data.getFromName(), data.getToDate(), data.getAmount(), data.getRate(),
                            data.getInterest(), data.getTds(),data.getBrokerName()};

                        defaultTableModel.addRow(obj);
                    }
                }

            });

        }

    }

 private void updateui(AccountData data)
 {
    accountsDropDown.setEditable(true);
 }

}
