/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package accountinfo;

import static accountinfo.dash_board.mode;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class dash_board extends javax.swing.JFrame {

    int clickCount = 0;
    long seconds;
    Thread thread = null;
    public static Mode mode;
    private SimpleDateFormat sdf;
    private List<AccountData> accountData;
    private List<DealData> dealData;
    private HashMap<String, DealData> deals;
    private DataInputStream inputStream;
    private DataOutputStream outputStream;
    private DefaultTableModel model;
    private SimpleDateFormat format;

    /**
     * Creates new form dash_board
     */
    public dash_board() {
        initComponents();
//         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
//screenSize.getHeight();
// screenSize.getWidth();
//     this.setSize(screenSize);

        try {
            format = new SimpleDateFormat("dd/MM/yyyy");
            mode = Mode.Hello;
            sdf = new SimpleDateFormat("dd/MM/yyyy");
            todayDate.setText(sdf.format(new Date()));
            accountData = new ArrayList();
            dealData = new ArrayList();
            model = (DefaultTableModel) expiredDealTable.getModel();
            deals = new HashMap();
            dealData = new ArrayList();
            accountData = new ArrayList();
            readDealData();
            readAccountData();
            createList();
            setTableListener();
            setTitle("MRJ Deal System");
        } catch (IOException e) {
        }

        modeLabel.setText(mode.toString());
    }

    public dash_board(List accountData, List <DealData>dealData) throws IOException {
        initComponents();

        format = new SimpleDateFormat("dd/MM/yyyy");
        sdf = new SimpleDateFormat("dd/MM/yyyy");
        todayDate.setText(sdf.format(new Date()));
        this.accountData = accountData;
        deals = new HashMap();

        model = (DefaultTableModel) expiredDealTable.getModel();

        if (dealData != null) {
            this.dealData = dealData;
            for(DealData data : dealData)
            {
                deals.put(data.getsNo(), data);
            }
        }
        
        updateFile();
        createList();
        setTableListener();
        setTitle("MRJ Deal System");
        modeLabel.setText(mode.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        header = new javax.swing.JLabel();
        todayDate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        expiredDealTable = new javax.swing.JTable();
        addNewDeal = new javax.swing.JButton();
        addNewAccount = new javax.swing.JButton();
        showDateData = new javax.swing.JButton();
        showAccountData = new javax.swing.JButton();
        viewaccount = new javax.swing.JButton();
        modeLabel = new javax.swing.JLabel();
        showBrokers = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        header.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        header.setText("MRJ Deal System");
        header.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                headerMouseClicked(evt);
            }
        });

        todayDate.setText("today's date");

        expiredDealTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DueDate", "Amount", "Receiver", "Giver", "FromDate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(expiredDealTable);

        addNewDeal.setText("ADD NEW DEAL");
        addNewDeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewDealActionPerformed(evt);
            }
        });

        addNewAccount.setText("ADD NEW ACCOUNT");
        addNewAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewAccountActionPerformed(evt);
            }
        });

        showDateData.setText("REPORT BY DATE");
        showDateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDateDataActionPerformed(evt);
            }
        });

        showAccountData.setText("REPORT BY ACCOUNT");
        showAccountData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAccountDataActionPerformed(evt);
            }
        });

        viewaccount.setText("VIEW ACCOUNT");
        viewaccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewaccountActionPerformed(evt);
            }
        });

        modeLabel.setForeground(new java.awt.Color(255, 0, 0));
        modeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        modeLabel.setText("Hello");

        showBrokers.setText("BROKERAGE ACCOUNTS");
        showBrokers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBrokersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(605, 605, 605)
                        .addComponent(todayDate))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 896, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addNewDeal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(13, 13, 13)
                        .addComponent(addNewAccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(9, 9, 9)
                        .addComponent(showDateData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(13, 13, 13)
                        .addComponent(showAccountData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(11, 11, 11)
                        .addComponent(viewaccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(17, 17, 17)
                        .addComponent(showBrokers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(840, 840, 840)
                        .addComponent(modeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(todayDate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addNewDeal)
                    .addComponent(addNewAccount)
                    .addComponent(showDateData)
                    .addComponent(showAccountData)
                    .addComponent(viewaccount)
                    .addComponent(showBrokers))
                .addGap(10, 10, 10)
                .addComponent(modeLabel)
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addNewDealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewDealActionPerformed
        dispose();
        new DealEntry(this.dealData, this.accountData, this.deals).setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_addNewDealActionPerformed

    private void addNewAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewAccountActionPerformed
        dispose();
        new AccountEntry(this.accountData, this.dealData).setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_addNewAccountActionPerformed

    private void showDateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDateDataActionPerformed
        dispose();
        new ShowDateData(this.dealData, this.accountData).setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_showDateDataActionPerformed

    private void showAccountDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAccountDataActionPerformed
        dispose();
        new ShowAccountData(this.accountData, this.dealData).setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_showAccountDataActionPerformed

    private void viewaccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewaccountActionPerformed
        dispose();
        new showAccountdetails().setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_viewaccountActionPerformed

    private void headerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerMouseClicked
        clickCount++;
        if (mode != Mode.Hello) {
            if (clickCount == 2) {
                long diff = (new Date().getTime() - seconds) / 1000;
                if (diff > 0) {
                    seconds = new Date().getTime();
                    clickCount = 1;
                    return;
                }
                JPasswordField pf = new JPasswordField();
                int passwordPane = JOptionPane.showConfirmDialog(null, pf, "Enter Password", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                if (passwordPane == JOptionPane.OK_OPTION) {
                    String password = pf.getText();
                    if (password.equals("admin@mrjdeal")) {
                        mode = Mode.Open;
                    }
                }
                clickCount = 0;
            } else {
                seconds = new Date().getTime();
            }
        }
        modeLabel.setText(mode.toString());
        // TODO add your handling code here:
    }//GEN-LAST:event_headerMouseClicked

    private void showBrokersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBrokersActionPerformed
        this.dispose();
        new BrokerDetails((ArrayList) this.dealData).setVisible(true);
    }//GEN-LAST:event_showBrokersActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dash_board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dash_board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dash_board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dash_board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dash_board().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewAccount;
    private javax.swing.JButton addNewDeal;
    private javax.swing.JTable expiredDealTable;
    private javax.swing.JLabel header;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel modeLabel;
    private javax.swing.JButton showAccountData;
    private javax.swing.JButton showBrokers;
    private javax.swing.JButton showDateData;
    private javax.swing.JLabel todayDate;
    private javax.swing.JButton viewaccount;
    // End of variables declaration//GEN-END:variables
private void createList() {

    if(deals==null ||  deals.isEmpty())
    {
        return;
    }
        format = new SimpleDateFormat("dd/MM/yyyy");
        deals.entrySet().forEach((data) -> {
            DealData dd = data.getValue();
            if (!dd.getStatus().equals(Status.PAID) && !dd.getStatus().equals(Status.HOLD) && !dd.getStatus().equals(Status.INACTIVE)) {

                String sNo;
                String fromdate;
                String todate;
                String amount;
                String from;
                String to;
                sNo = dd.getsNo();
                from = dd.getFromName();
                to = dd.getToName();
                fromdate = format.format(new Date(dd.getFromDate()));
                todate = format.format(new Date(dd.getToDate()));

                amount = dd.getAmount();

                Object obj[] = {todate, amount, to, from, fromdate};
                model.addRow(obj);
            }

        });

    }

    //read the deal the data from the file
    private void readDealData() throws FileNotFoundException, IOException {
        File file = new File("deal data.mno");
        if (!file.exists()) {
            return;
        }
        inputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
        while (inputStream.available() > 0) {
            DealData dealData = new DealData();
            String sNo = inputStream.readUTF();

            int dataLength = inputStream.readInt();
            byte[] dataBytes = new byte[dataLength];

            inputStream.read(dataBytes, 0, dataLength);
            String data[] = new CipherData().decrypter(dataBytes).split(":");

            dealData.setsNo(sNo);
            dealData.setDate(data[0]);
            dealData.setFromDate(data[1]);
            dealData.setToDate(data[2]);
            dealData.setAmount(data[3]);
            dealData.setRate(data[4]);
            dealData.setInterest(data[5]);
            dealData.setTds(data[6]);
            dealData.setNet(data[7]);
            dealData.setStatus(Status.valueOf(data[8]));
            dealData.setBrok(Integer.valueOf(data[9].split("-")[1]));
            dealData.setBrokerName(data[9].split("-")[0]);
            dealData.setTo(Integer.valueOf(data[10].split("-")[1]));
            dealData.setToName(data[10].split("-")[0]);
            dealData.setFrom(Integer.valueOf(data[11].split("-")[1]));
            dealData.setFromName(data[11].split("-")[0]);
            dealData.setBrokerRate(data[12]);
            dealData.setBrokerNet(data[13]);
            dealData.setBrokerTds(data[14]);
            dealData.setBrokerInterest(data[15]);
            this.dealData.add(dealData);
            
            deals.put(dealData.getsNo(), dealData);
        }

        inputStream.close();

    }

    //read account data from the file
    private void readAccountData() throws IOException {
        File file = new File("account data.mno");

        if (!file.exists()) {
            return;
        }
        inputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
        while (inputStream.available() > 0) {

            int dataLength = inputStream.readInt();
            byte[] dataBytes = new byte[dataLength];
            inputStream.read(dataBytes, 0, dataLength);
            String data[] = new CipherData().decrypter(dataBytes).split(":");
            AccountData accountData = new AccountData();
            accountData.setName(data[0]);
            accountData.setAddress(data[1]);
            accountData.setPan(data[2]);
            accountData.setIsSelf(Boolean.parseBoolean(data[3]));
            accountData.setId(Integer.valueOf(data[4]));
            this.accountData.add(accountData);
        }
//        System.out.println(this.accountData);
        inputStream.close();

    }

    //update file when the data changes
    private void updateFile() throws FileNotFoundException, IOException {
        File file = new File("deal data.mno");
        File tempFile = new File("temp.mno");
        tempFile.createNewFile();
        outputStream = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(tempFile)));
        for (DealData data : dealData) {
            System.out.println(data);
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

            String fileData = data.getDate() + ":" + data.getFromDate() + ":" + data.getToDate() + ":"
                    + data.getAmount() + ":" + data.getRate() + ":" + data.getInterest() + ":" + data.getTds() + ":"
                    + data.getNet() + ":" + data.getStatus().toString() + ":" + data.getBrokerName() + "-" + data.getBrok() + ":" + data.getToName() + "-" + data.getTo() + ":" + data.getFromName() + "-" + data.getFrom() + ":" + data.getBrokerRate() + ":" + data.getBrokerNet() + ":" + data.getBrokerTds() + ":" + data.getBrokerInterest();
            byte[] dataByte = fileData.getBytes();
            dataByte = new CipherData().encrypter(dataByte);
            outputStream.writeUTF(data.getsNo());
            outputStream.writeInt(dataByte.length);
            outputStream.write(dataByte);
        }
        outputStream.close();

        if (file.exists()) {
            file.delete();
        }
        tempFile.renameTo(file);

    }

    //add table listener when the row is selected
    private void setTableListener() {

        expiredDealTable.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                return;
            }

            int row = expiredDealTable.getSelectedRow();
            if (row < 0) {
                return;
            }
            //get the data for the selected row
            for (DealData data : dealData) {

                if (format.format(new Date(data.getToDate())).equals((String) expiredDealTable.getValueAt(row, 0))) {

                    Object[] options = {"View", "Renew", "Paid", "Hold"};
                    int n = JOptionPane.showOptionDialog(null, null, "Choose an Option!!", JOptionPane.DEFAULT_OPTION,
                            JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
                    expiredDealTable.removeRowSelectionInterval(row, row);
                    if (n < 0) {
                        return;
                    }
                    switch (n) {
                        case 0: {
                            try {
                                dispose();
                                new DealEntry(data, dealData, accountData, deals).setVisible(true);

                            } catch (IOException ex) {
                                Logger.getLogger(dash_board.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            break;
                        }
                        case 1: {
                            try {
                                data.setStatus(Status.INACTIVE);
                                dispose();
                                new DealEntry(data, dealData, accountData, deals).setVisible(true);
                            } catch (IOException ex) {
                                Logger.getLogger(dash_board.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            break;
                        }

                        case 2: {
                            data.setStatus(Status.PAID);
                            model.removeRow(row);
                        }
                        break;

                        case 3: {
                            data.setStatus(Status.HOLD);
                            model.removeRow(row);
                        }
                    }
                    try {
                        updateFile();
                    } catch (IOException ex) {
                        Logger.getLogger(dash_board.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    break;
                }
            }
        });
    }
}
