package accountinfo;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/*
 *
 * @author RIDDLE

 */
public class BrokerDetails extends javax.swing.JFrame {

    ArrayList<DealData> deals = new ArrayList();
    Set<String> brokers = new HashSet();
    DefaultTableModel tableModel;

    public BrokerDetails(ArrayList<DealData> deals) {
        initComponents();
        this.deals = deals;
        tableModel = (DefaultTableModel)dataTable.getModel();
        createBrokerList();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox4 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        brokersList = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        inactiveCheck = new javax.swing.JCheckBox();
        paidCheck = new javax.swing.JCheckBox();
        holdCheck = new javax.swing.JCheckBox();
        activeCheck = new javax.swing.JCheckBox();
        generatePdf = new javax.swing.JButton();
        generateExcel = new javax.swing.JButton();

        jCheckBox4.setText("Active");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Giver", "Receiver", "Broker Amount  ", "Broker Rate  ", "Broker Interest  ", "Broker TDS  ", "Broker NET"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(dataTable);

        brokersList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Broker Account" }));
        brokersList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                brokersListItemStateChanged(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        inactiveCheck.setText("INACTIVE");
        inactiveCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxChange(evt);
            }
        });

        paidCheck.setText("PAID");
        paidCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxChange(evt);
            }
        });

        holdCheck.setText("HOLD");
        holdCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxChange(evt);
            }
        });

        activeCheck.setText("ACTIVE");
        activeCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxChange(evt);
            }
        });

        generatePdf.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        generatePdf.setText("Generate PDF");
        generatePdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePdfActionPerformed(evt);
            }
        });

        generateExcel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        generateExcel.setText("Generate Excel");
        generateExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(217, 217, 217)
                .addComponent(generatePdf)
                .addGap(77, 77, 77)
                .addComponent(generateExcel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(310, 310, 310)
                .addComponent(brokersList, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inactiveCheck)
                    .addComponent(paidCheck))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(holdCheck)
                    .addComponent(activeCheck))
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(brokersList, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(activeCheck)
                            .addComponent(inactiveCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paidCheck)
                            .addComponent(holdCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(generatePdf)
                    .addComponent(generateExcel))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void brokersListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_brokersListItemStateChanged
            updateTable(activeCheck.isSelected(), inactiveCheck.isSelected(), paidCheck.isSelected(), holdCheck.isSelected());
            
    }//GEN-LAST:event_brokersListItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        new dash_board().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void checkBoxChange(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxChange
            updateTable(activeCheck.isSelected(), inactiveCheck.isSelected(), paidCheck.isSelected(), holdCheck.isSelected());
    }//GEN-LAST:event_checkBoxChange

    private void generatePdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePdfActionPerformed
        
        
        if (brokersList.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Select a valid account", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (tableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Data Found!!", null, JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(new File("Brokers Data.pdf")));
            document.open();
            String header = "Deals for the account: " + brokersList.getSelectedItem();
            document.add(new Paragraph(header));
            document.add(new Paragraph(" "));
            PdfPTable table = new PdfPTable(tableModel.getColumnCount());
            table.setWidthPercentage(100);
            PdfPCell cell = new PdfPCell();
            for (int i = 0; i < tableModel.getColumnCount(); i++) {
                cell = new PdfPCell(new Paragraph(tableModel.getColumnName(i)));
                cell.setHorizontalAlignment(Element.ALIGN_MIDDLE);
                table.addCell(cell);
            }
            document.add(table);

            for (int i = 0; i < tableModel.getRowCount(); i++) {
                table = new PdfPTable(tableModel.getColumnCount());
                for (int j = 0; j < tableModel.getColumnCount(); j++) {
                    cell = new PdfPCell(new Paragraph((String) tableModel.getValueAt(i, j)));
                    table.addCell(cell);

                }
                table.setWidthPercentage(100);
                document.add(table);

            }
            document.close();
            writer.close();
            Desktop.getDesktop().open(new File("Brokers Data.pdf"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ShowAccountData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException | IOException ex) {
            Logger.getLogger(ShowAccountData.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_generatePdfActionPerformed

    private void generateExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateExcelActionPerformed
       if (brokersList.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Select a valid account", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (tableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Data Found!!", null, JOptionPane.INFORMATION_MESSAGE);
        }
        Workbook workbook = new HSSFWorkbook();
        try {
            OutputStream stream = new FileOutputStream("Brokers Data.xls");
            Sheet sheet = workbook.createSheet("Brokers Data");
            int rowCount = 2;
            Row headerRow = sheet.createRow(0);
            headerRow.createCell(1).setCellValue("Deals for the account: " + brokersList.getSelectedItem());

            headerRow = sheet.createRow(rowCount);
            for (int i = 0; i < tableModel.getColumnCount(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(tableModel.getColumnName(i));
            }
            rowCount++;
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                Row row = sheet.createRow(rowCount);
                rowCount++;
                for (int j = 0; j < tableModel.getColumnCount(); j++) {
                    row.createCell(j).setCellValue((String) tableModel.getValueAt(i, j));
                }
            }

            for (int i = 0; i < tableModel.getColumnCount(); i++) {
                sheet.autoSizeColumn(i);
            }

            workbook.write(stream);
            stream.close();

            Desktop.getDesktop().open(new File("Brokers Data.xls"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ShowAccountData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ShowAccountData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generateExcelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BrokerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BrokerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BrokerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BrokerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new BrokerDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activeCheck;
    private javax.swing.JComboBox<String> brokersList;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton generateExcel;
    private javax.swing.JButton generatePdf;
    private javax.swing.JCheckBox holdCheck;
    private javax.swing.JCheckBox inactiveCheck;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox paidCheck;
    // End of variables declaration//GEN-END:variables

    private void createBrokerList() {

        File dataFile = new File("BrokerData.mno");
        if (!dataFile.exists()) {
            return;
        }

        try {
            DataInputStream inputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(dataFile)));

            while (inputStream.available() > 0) {
                int size = inputStream.readInt();
                byte [] bytes = new byte[size];
                inputStream.read(bytes, 0, size);
                String data[] = new CipherData().decrypter(bytes).split(":");
                BrokerData brokerData = new BrokerData();
                brokerData.setsNo(data[0]);
                brokerData.setBrokerName(data[1]);
                brokerData.setBrokerAmount(data[2]);
                brokerData.setBrokerRate(data[3]);
                brokerData.setBrokerInterest(data[4]);
                brokerData.setBrokerTds(data[5]);
                brokerData.setBrokerNet(data[6]);
                
                brokers.add(brokerData.getBrokerName());
            }
            
            for(String broker : brokers)
            {
                brokersList.addItem(broker);
            }

        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }

    private void updateTable(boolean active, boolean inactive, boolean paid, boolean hold) {    
        tableModel.setRowCount(0);
        if(brokersList.getSelectedIndex()==0)
        {
            return;
        }
        
        String broker = (String)brokersList.getSelectedItem();
        
        for(DealData data : deals)
        {
            if(data.getBrokerName().equals(broker))
            {
                if((data.getStatus().equals(Status.ACTIVE)&&active)||(data.getStatus().equals(Status.INACTIVE)&&inactive)||
                        (data.getStatus().equals(Status.PAID)&&paid)&&(data.getStatus().equals(Status.HOLD)&&hold))
                {
                    Object obj[] = {data.getFromName(), data.getToName(), data.getAmount(), data.getBrokerRate()+"%", data.getBrokerInterest(), data.getBrokerTds(), data.getBrokerNet()};
                    tableModel.addRow(obj);
                }
            }
        }
        
    }
}
